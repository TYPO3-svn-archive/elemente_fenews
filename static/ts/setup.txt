includeLibs.tx_elementefenews_selectionMenu = EXT:elemente_fenews/lib/class.user_selectionMenu.php

# elemente_fenews
plugin.tx_elementefenews_pi1 {
	template				= {$plugin.tx_elementefenews_pi1.template}
	debug					= {$plugin.tx_elementefenews_pi1.debug}

	mimeInclude				= image/gif,image/png,image/jpeg,application/x-zip-compressed
	mimeExclude				= application/octet-stream
	extExclude				= exe,php,php3
	extInclude				= *
	maxsize					= 15728640
	path_image				= uploads/pics
	path_news_files			= uploads/media
	
	# @description	Render configuration of preview image in edit mode
	preview_image {
		wrap				= <div class="news-list-img">|</div>
		filePath			= uploads/pics/
		file.maxW			= {$plugin.tt_news.listMaxW}
	    file.maxH			= {$plugin.tt_news.listMaxH}
	}
	
	# @description	Render configuration of preview news_files in edit mode 
	preview_news_files		= TEXT
	preview_news_files {
		wrap				= <div class="news-list-files">|</div>
		filePath			= uploads/media/
		typolink.parameter	= PHP_VALUE
		typolink.ATagParams	= class="download"
	}

	dateConfig {
		# @description	Enable time in date2cal fields 
		time.enable			= 1

		# @description	Edit news: PHP strftime format 
		strftime.format		= %H:%M %d.%m.%Y

		# @description	Validate news: Constrain datetime format as a regular expression to check user input against 
		constrain.regex		= /(\d{2}):(\d{2}) (\d{2}).(\d{2}).(\d{4})/
		# @description	Validate news: Human readable datetime format for error message if vailidation fails 
		constrain.format	= hh:mm dd.mm.yyyy

		# @description	Save news: Position of the hour in a date string (1/2/3/4/5). Example: 10:00 25.06.2011 -> 1
		mktime.hour			= 1
		# @description	Save news: Position of the minute in a date string (1/2/3/4/5). Example: 10:00 25.06.2011 -> 2
		mktime.min			= 2
		# @description	Save news: Position of the day in a date string (1/2/3/4/5). Example: 10:00 25.06.2011 -> 3
		mktime.day			= 3
		# @description	Save news: Position of the month in a date string (1/2/3/4/5). Example: 10:00 25.06.2011 -> 4
		mktime.month		= 4
		# @description	Save news: Position of the year in a date string (1/2/3/4/5). Example: 10:00 25.06.2011 -> 5
		mktime.year			= 5
	}

	selectionMenu = COA
	selectionMenu { 
		category = HMENU
		category {
			# @description	A special userfunction is called to render the "selection" fields
			special						= userfunction
			special.userFunc			= user_selectionMenu->getSelectionMenu
			
			# @description	Database table to get the items from
			special.userFunc.table		= tt_news_cat
			
			# @description	Fields of defined database table, which are returned by the userFunc
			special.userFunc.select		= uid, title, title_lang_ol, shortcut
			
			# @description	Don't touch: Parameter is set directly by the plugin and predicates on the FlexForm category settings 
			special.userFunc.where		= PHP_VALUE
			
			# @description	Don't touch: Parameter is set directly by the plugin and holds an array with selected items for edit mode
			special.userFunc.selected	= PHP_VALUE
			
			# @description	Database field to order the items 
			special.userFunc.order		= title
			
			# @description	Database field which defines the "parent item" to generate hierachical structures 
			special.userFunc.parent		= tt_news_cat.parent_category
			
			# @description	Parameter slices the first category out of tree, example:
			# If you have a hierachical category-tree, the defined category under FlexForm config "Selection for user in Frontend" is used as "starting point",
			# but you don't want to show itself, only its childs. Therefor you could set skipFirst = 1 to slice the "starting point" category out of the tree and
			# start one level deeper. But if you have a one-level category-tree or some hierachical category-trees beside, skipFirst = 0 would be right!
			special.userFunc.skipFirst	= 1
			
			1 = TMENU
	 		1 {
				expAll = 1
	    		wrap = <ul>|</ul>
				NO {
					wrapItemAndSub = <li>|</li>
					stdWrap.cObject = COA
					stdWrap.cObject {
						10 = TEXT
						10.value = <input type="checkbox"
						20 = TEXT
						20.field = uid
						20.noTrimWrap = | id="tx_elementefenews_pi1_category_|" name="tx_elementefenews_pi1[category][]"|
						30 = TEXT
						30.field = uid
						30.noTrimWrap = | value="|"|
						30.if.isFalse.field = shortcut
						// if shortcut is set, put it into the value for redirect after saving
						40 = TEXT
						40.field = uid
						40.noTrimWrap = | value="|,{field:shortcut}"|
						40.if.isTrue.field = shortcut 
						40.insertData = 1
						50 = TEXT
						50.value = checked="checked"
						50.noTrimWrap = | ||
						50.if.isTrue.field = selected
						60 = TEXT
						60.value = class="ckeck"
						60.noTrimWrap = | | |
						70 = TEXT
						70.value = />
# ToDo: Language
						80 = TEXT
						80.field = title
						80.noTrimWrap = | <label for="tx_elementefenews_pi1_category_{field:uid}">|</label>
						80.insertData = 1
					}
					doNotLinkIt = 1
				}
			}
			2 < .1
#			3 < .1

/*
			# Example: Configuration as multi-select field
			1 = TMENU
	 		1 {
				expAll = 1
	    		wrap = <select name="tx_elementefenews_pi1[category][]" id="tx_elementefenews_pi1_category" size="10" class="select" multiple="multiple">|</select>
				NO {
					stdWrap.cObject = COA
					stdWrap.cObject {
						10 = TEXT
						10.value = <option
						20 = TEXT
						20.field = uid
						20.noTrimWrap = | value="|"|
						20.if.isFalse.field = shortcut
						// if shortcut is set, put it into the value for redirect after saving
						30 = TEXT
						30.field = uid
						30.noTrimWrap = | value="|,{field:shortcut}"|
						30.if.isTrue.field = shortcut 
						30.insertData = 1
						40 = TEXT
						40.value = selected="selected"
						40.noTrimWrap = | ||
						40.if.isTrue.field = selected
						50 = TEXT
						50.field = title
						50.wrap = >|</option>
					}
					doNotLinkIt = 1
				}
			}
			2 < .1
			2.wrap = <optgroup>|</optgroup>
#			3 < .1
#			3.wrap = <optgroup>|</optgroup>
*/
		}
		related = HMENU
		related {
			# @description	See .category
			special						= userfunction
			special.userFunc			= user_selectionMenu->getSelectionMenu
			special.userFunc.table		= tt_news
			special.userFunc.select		= uid, title
			special.userFunc.where		= pid IN ({$plugin.tx_elementefenews_pi1.related.pid})
			special.userFunc.selected	= PHP_VALUE
			special.userFunc.order		= title
			special.userFunc.parent		= 
			special.userFunc.skipFirst	= 0
			1 = TMENU
	 		1 {
				expAll = 0
				wrap = <select name="tx_elementefenews_pi1[related][]" id="tx_elementefenews_pi1_related" size="5" class="select" multiple="multiple">|</select>
				NO {
					stdWrap.cObject = COA
					stdWrap.cObject {
						10 = TEXT
						10.value = <option
						20 = TEXT
						20.field = uid
						20.noTrimWrap = | value="|"|
						30 = TEXT
						30.value = selected="selected"
						30.noTrimWrap = | ||
						30.if.isTrue.field = selected
						40 = TEXT
						40.field = title
						40.wrap = >|</option>
					}
					doNotLinkIt = 1
				}
			}
		}
		fe_group = HMENU
		fe_group {
			# @description	See .category
			special							= userfunction
			special.userFunc				= user_selectionMenu->getSelectionMenu
			special.userFunc.table			= fe_groups
			special.userFunc.select			= uid, title
			special.userFunc.where			= pid IN ({$plugin.tx_elementefenews_pi1.fe_group.pid})
			special.userFunc.selected		= PHP_VALUE
			special.userFunc.order			= title
			special.userFunc.parent			= 
			special.userFunc.skipFirst		= 0
			special.userFunc.defaultItems	= 1
			1 = TMENU
	 		1 {
				expAll = 1
	    		wrap = <ul>|</ul>
				# Default settings
				# ToDo: Check if a value is checked
#	    		stdWrap.prepend = COA
#				stdWrap.prepend {
#					10 = TEXT
#					10.data = LLL:EXT:elemente_fenews/pi1/locallang.xml:ts_fe_group_hide
#					10.wrap = <li><input type="checkbox" id="tx_elementefenews_pi1_fe_group_hide" name="tx_elementefenews_pi1[fe_group][]" value="-1" class="check" /> <label for="tx_elementefenews_pi1_fe_group_hide">|</label></li>
#					20 = TEXT
#					20.data = LLL:EXT:elemente_fenews/pi1/locallang.xml:ts_fe_group_show
#					20.wrap = <li><input type="checkbox" id="tx_elementefenews_pi1_fe_group_show" name="tx_elementefenews_pi1[fe_group][]" value="-2" class="check" /> <label for="tx_elementefenews_pi1_fe_group_show">|</label></li>
#				}
				NO {
					wrapItemAndSub = <li>|</li>
					stdWrap.cObject = COA
					stdWrap.cObject {
						10 = TEXT
						10.value = <input type="checkbox"
						20 = TEXT
						20.field = uid
						20.noTrimWrap = | id="tx_elementefenews_pi1_fe_group_|" name="tx_elementefenews_pi1[fe_group][]"|
						30 = TEXT
						30.field = uid
						30.noTrimWrap = | value="|"|
						40 = TEXT
						40.value = checked="checked"
						40.noTrimWrap = | ||
						40.if.isTrue.field = selected
						50 = TEXT
						50.value = class="ckeck"
						50.noTrimWrap = | | |
						60 = TEXT
						60.value = />
						70 = TEXT
						70.field = title
						70.noTrimWrap = | <label for="tx_elementefenews_pi1_fe_group_{field:uid}">|</label>
						70.insertData = 1
					}
					doNotLinkIt = 1
				}
			}
		}
		sys_language_uid = HMENU
		sys_language_uid {
			# @description	See .category
			special							= userfunction
			special.userFunc				= user_selectionMenu->getSelectionMenu
			special.userFunc.table			= sys_language
			special.userFunc.select			= uid, title
			special.userFunc.where			= 1=1
			special.userFunc.selected		= PHP_VALUE
			special.userFunc.order			= title
			special.userFunc.parent			= 
			special.userFunc.skipFirst		= 0
			special.userFunc.defaultItems	= 1
			1 = TMENU
	 		1 {
				expAll = 0
				wrap = <select name="tx_elementefenews_pi1[sys_language_uid]" id="tx_elementefenews_pi1_sys_language_uid" size="1" class="select">|</select>
				# Default settings
				# ToDo: Check if a value is checked
#	    		stdWrap.prepend = COA
#				stdWrap.prepend {
#					10 = TEXT
#					10.data = LLL:EXT:elemente_fenews/pi1/locallang.xml:ts_sys_language_default
#					10.wrap = <option value="0">|</option>
#					20 = TEXT
#					20.data = LLL:EXT:elemente_fenews/pi1/locallang.xml:ts_sys_language_all
#					20.wrap = <option value="-1">|</option>
#				}
				NO {
					stdWrap.cObject = COA
					stdWrap.cObject {
						10 = TEXT
						10.value = <option
						20 = TEXT
						20.field = uid
						20.noTrimWrap = | value="|"|
						30 = TEXT
						30.value = selected="selected"
						30.noTrimWrap = | ||
						30.if.isTrue.field = selected
						40 = TEXT
						40.field = title
						40.wrap = >|</option>
					}
					doNotLinkIt = 1
				}
			}
		}
	}
}


# Extend tt_news for "edit/delete record hook"
plugin.tt_news {
	displaySingle {
		feEdit {
			wrap			= {$plugin.tt_news.feEdit.wrap}
			labelWrap.wrap	= {$plugin.tt_news.feEdit.labelWrap.wrap}
			editRecord		= {$plugin.tt_news.feEdit.editRecord}
			editRecord {
				wrap		= {$plugin.tt_news.feEdit.editRecord.wrap}
				parameter	= {$plugin.tt_news.feEdit.pidFeNews}
			}
			delRecord		= {$plugin.tt_news.feEdit.delRecord}
			delRecord {
				wrap		= {$plugin.tt_news.feEdit.delRecord.wrap}
				parameter	= {$plugin.tt_news.feEdit.pidFeNews}
				ATagParams.cObject		= TEXT
				ATagParams.cObject.data	= LLL:EXT:elemente_fenews/pi1/locallang.xml:l_confirm_delete
				ATagParams.cObject.wrap	= onclick="if(confirm('|')==false) return false;"
			}
		}
	}
	displayList.feEdit < .displaySingle.feEdit
	displayLatest.feEdit < .displaySingle.feEdit

	_LOCAL_LANG {
		default {
			tx-elementefenews-editRecord = Edit record
			tx-elementefenews-delRecord = Delete record
		}
		de {
			tx-elementefenews-editRecord = Bearbeite Eintrag
			tx-elementefenews-delRecord = Lösche Eintrag
		}
	}
}